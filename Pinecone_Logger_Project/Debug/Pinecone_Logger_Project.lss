
Pinecone_Logger_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000814  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00000814  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000080  20000004  00000818  00010004  2**2
                  ALLOC
  3 .stack        00002004  20000084  00000898  00010004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000a64d  00000000  00000000  00010087  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019a4  00000000  00000000  0001a6d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000020a4  00000000  00000000  0001c078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002e0  00000000  00000000  0001e11c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000248  00000000  00000000  0001e3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000035c2  00000000  00000000  0001e644  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007930  00000000  00000000  00021c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005debe  00000000  00000000  00029536  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000005ec  00000000  00000000  000873f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20002088 	.word	0x20002088
   4:	000006c1 	.word	0x000006c1
   8:	000006bd 	.word	0x000006bd
   c:	000006bd 	.word	0x000006bd
	...
  2c:	000006bd 	.word	0x000006bd
	...
  38:	000006bd 	.word	0x000006bd
  3c:	000006bd 	.word	0x000006bd
  40:	000006bd 	.word	0x000006bd
  44:	000006bd 	.word	0x000006bd
  48:	0000018d 	.word	0x0000018d
  4c:	000006bd 	.word	0x000006bd
  50:	000001a9 	.word	0x000001a9
  54:	000006bd 	.word	0x000006bd
  58:	000006bd 	.word	0x000006bd
  5c:	000006bd 	.word	0x000006bd
  60:	000006bd 	.word	0x000006bd
  64:	000006bd 	.word	0x000006bd
  68:	000006bd 	.word	0x000006bd
  6c:	000006bd 	.word	0x000006bd
  70:	000006bd 	.word	0x000006bd
  74:	000006bd 	.word	0x000006bd
  78:	000006bd 	.word	0x000006bd
  7c:	000006bd 	.word	0x000006bd
  80:	000006bd 	.word	0x000006bd
  84:	000006bd 	.word	0x000006bd
  88:	000006bd 	.word	0x000006bd
  8c:	000006bd 	.word	0x000006bd
  90:	000006bd 	.word	0x000006bd
  94:	000006bd 	.word	0x000006bd
  98:	000006bd 	.word	0x000006bd
  9c:	000006bd 	.word	0x000006bd
  a0:	000006bd 	.word	0x000006bd

000000a4 <__do_global_dtors_aux>:
  a4:	b510      	push	{r4, lr}
  a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
  a8:	7823      	ldrb	r3, [r4, #0]
  aa:	2b00      	cmp	r3, #0
  ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
  ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
  b0:	2b00      	cmp	r3, #0
  b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
  b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
  b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
  b8:	bf00      	nop
  ba:	2301      	movs	r3, #1
  bc:	7023      	strb	r3, [r4, #0]
  be:	bd10      	pop	{r4, pc}
  c0:	20000004 	.word	0x20000004
  c4:	00000000 	.word	0x00000000
  c8:	00000814 	.word	0x00000814

000000cc <frame_dummy>:
  cc:	b508      	push	{r3, lr}
  ce:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
  d0:	2b00      	cmp	r3, #0
  d2:	d003      	beq.n	dc <frame_dummy+0x10>
  d4:	4807      	ldr	r0, [pc, #28]	; (f4 <frame_dummy+0x28>)
  d6:	4908      	ldr	r1, [pc, #32]	; (f8 <frame_dummy+0x2c>)
  d8:	e000      	b.n	dc <frame_dummy+0x10>
  da:	bf00      	nop
  dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
  de:	6803      	ldr	r3, [r0, #0]
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x20>
  e4:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
  e6:	2b00      	cmp	r3, #0
  e8:	d000      	beq.n	ec <frame_dummy+0x20>
  ea:	4798      	blx	r3
  ec:	bd08      	pop	{r3, pc}
  ee:	46c0      	nop			; (mov r8, r8)
  f0:	00000000 	.word	0x00000000
  f4:	00000814 	.word	0x00000814
  f8:	20000008 	.word	0x20000008
  fc:	00000814 	.word	0x00000814
 100:	00000000 	.word	0x00000000

00000104 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
 104:	4b05      	ldr	r3, [pc, #20]	; (11c <_extint_enable+0x18>)
 106:	7819      	ldrb	r1, [r3, #0]
 108:	2202      	movs	r2, #2
 10a:	430a      	orrs	r2, r1
 10c:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
 10e:	1c1a      	adds	r2, r3, #0
 110:	7853      	ldrb	r3, [r2, #1]
 112:	b25b      	sxtb	r3, r3
 114:	2b00      	cmp	r3, #0
 116:	dbfb      	blt.n	110 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
 118:	4770      	bx	lr
 11a:	46c0      	nop			; (mov r8, r8)
 11c:	40001800 	.word	0x40001800

00000120 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
 120:	b500      	push	{lr}
 122:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
 124:	4b12      	ldr	r3, [pc, #72]	; (170 <_system_extint_init+0x50>)
 126:	6999      	ldr	r1, [r3, #24]
 128:	2240      	movs	r2, #64	; 0x40
 12a:	430a      	orrs	r2, r1
 12c:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
 12e:	a901      	add	r1, sp, #4
 130:	2300      	movs	r3, #0
 132:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
 134:	2003      	movs	r0, #3
 136:	4b0f      	ldr	r3, [pc, #60]	; (174 <_system_extint_init+0x54>)
 138:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
 13a:	2003      	movs	r0, #3
 13c:	4b0e      	ldr	r3, [pc, #56]	; (178 <_system_extint_init+0x58>)
 13e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
 140:	4b0e      	ldr	r3, [pc, #56]	; (17c <_system_extint_init+0x5c>)
 142:	7819      	ldrb	r1, [r3, #0]
 144:	2201      	movs	r2, #1
 146:	430a      	orrs	r2, r1
 148:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
 14a:	1c1a      	adds	r2, r3, #0
 14c:	7853      	ldrb	r3, [r2, #1]
 14e:	b25b      	sxtb	r3, r3
 150:	2b00      	cmp	r3, #0
 152:	dbfb      	blt.n	14c <_system_extint_init+0x2c>
 154:	4b0a      	ldr	r3, [pc, #40]	; (180 <_system_extint_init+0x60>)
 156:	1c19      	adds	r1, r3, #0
 158:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
 15a:	2200      	movs	r2, #0
 15c:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
 15e:	428b      	cmp	r3, r1
 160:	d1fc      	bne.n	15c <_system_extint_init+0x3c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
 162:	2210      	movs	r2, #16
 164:	4b07      	ldr	r3, [pc, #28]	; (184 <_system_extint_init+0x64>)
 166:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
 168:	4b07      	ldr	r3, [pc, #28]	; (188 <_system_extint_init+0x68>)
 16a:	4798      	blx	r3
}
 16c:	b003      	add	sp, #12
 16e:	bd00      	pop	{pc}
 170:	40000400 	.word	0x40000400
 174:	000005b9 	.word	0x000005b9
 178:	0000052d 	.word	0x0000052d
 17c:	40001800 	.word	0x40001800
 180:	2000003c 	.word	0x2000003c
 184:	e000e100 	.word	0xe000e100
 188:	00000105 	.word	0x00000105

0000018c <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
 18c:	b508      	push	{r3, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
 18e:	2201      	movs	r2, #1
 190:	4b03      	ldr	r3, [pc, #12]	; (1a0 <WDT_Handler+0x14>)
 192:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
 194:	4b03      	ldr	r3, [pc, #12]	; (1a4 <WDT_Handler+0x18>)
 196:	681b      	ldr	r3, [r3, #0]
 198:	2b00      	cmp	r3, #0
 19a:	d000      	beq.n	19e <WDT_Handler+0x12>
		wdt_early_warning_callback();
 19c:	4798      	blx	r3
	}
}
 19e:	bd08      	pop	{r3, pc}
 1a0:	40001000 	.word	0x40001000
 1a4:	2000007c 	.word	0x2000007c

000001a8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
 1a8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
 1aa:	2200      	movs	r2, #0
 1ac:	4b16      	ldr	r3, [pc, #88]	; (208 <EIC_Handler+0x60>)
 1ae:	701a      	strb	r2, [r3, #0]
 1b0:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
 1b2:	261f      	movs	r6, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
 1b4:	4d15      	ldr	r5, [pc, #84]	; (20c <EIC_Handler+0x64>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
 1b6:	4c14      	ldr	r4, [pc, #80]	; (208 <EIC_Handler+0x60>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
 1b8:	2b1f      	cmp	r3, #31
 1ba:	d910      	bls.n	1de <EIC_Handler+0x36>
 1bc:	e019      	b.n	1f2 <EIC_Handler+0x4a>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
 1be:	4914      	ldr	r1, [pc, #80]	; (210 <EIC_Handler+0x68>)
 1c0:	e000      	b.n	1c4 <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
 1c2:	2100      	movs	r1, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
 1c4:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
 1c6:	009b      	lsls	r3, r3, #2
 1c8:	595b      	ldr	r3, [r3, r5]
 1ca:	2b00      	cmp	r3, #0
 1cc:	d000      	beq.n	1d0 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
 1ce:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
 1d0:	7823      	ldrb	r3, [r4, #0]
 1d2:	3301      	adds	r3, #1
 1d4:	b2db      	uxtb	r3, r3
 1d6:	7023      	strb	r3, [r4, #0]
 1d8:	2b0f      	cmp	r3, #15
 1da:	d814      	bhi.n	206 <EIC_Handler+0x5e>
 1dc:	e7ec      	b.n	1b8 <EIC_Handler+0x10>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
 1de:	1c32      	adds	r2, r6, #0
 1e0:	401a      	ands	r2, r3
 1e2:	2101      	movs	r1, #1
 1e4:	4091      	lsls	r1, r2
 1e6:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
 1e8:	4909      	ldr	r1, [pc, #36]	; (210 <EIC_Handler+0x68>)
 1ea:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
 1ec:	4211      	tst	r1, r2
 1ee:	d1e6      	bne.n	1be <EIC_Handler+0x16>
 1f0:	e7ee      	b.n	1d0 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
 1f2:	1c32      	adds	r2, r6, #0
 1f4:	401a      	ands	r2, r3
 1f6:	2101      	movs	r1, #1
 1f8:	4091      	lsls	r1, r2
 1fa:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
 1fc:	2100      	movs	r1, #0
 1fe:	6909      	ldr	r1, [r1, #16]
 200:	4211      	tst	r1, r2
 202:	d1de      	bne.n	1c2 <EIC_Handler+0x1a>
 204:	e7e4      	b.n	1d0 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
 206:	bd70      	pop	{r4, r5, r6, pc}
 208:	20000080 	.word	0x20000080
 20c:	2000003c 	.word	0x2000003c
 210:	40001800 	.word	0x40001800

00000214 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 214:	b500      	push	{lr}
 216:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
 218:	ab01      	add	r3, sp, #4
 21a:	2280      	movs	r2, #128	; 0x80
 21c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 21e:	780a      	ldrb	r2, [r1, #0]
 220:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 222:	784a      	ldrb	r2, [r1, #1]
 224:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 226:	788a      	ldrb	r2, [r1, #2]
 228:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 22a:	1c19      	adds	r1, r3, #0
 22c:	4b01      	ldr	r3, [pc, #4]	; (234 <port_pin_set_config+0x20>)
 22e:	4798      	blx	r3
}
 230:	b003      	add	sp, #12
 232:	bd00      	pop	{pc}
 234:	00000661 	.word	0x00000661

00000238 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
 238:	4770      	bx	lr
 23a:	46c0      	nop			; (mov r8, r8)

0000023c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 23c:	4b0c      	ldr	r3, [pc, #48]	; (270 <cpu_irq_enter_critical+0x34>)
 23e:	681b      	ldr	r3, [r3, #0]
 240:	2b00      	cmp	r3, #0
 242:	d110      	bne.n	266 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 244:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 248:	2b00      	cmp	r3, #0
 24a:	d109      	bne.n	260 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 24c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 24e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 252:	2200      	movs	r2, #0
 254:	4b07      	ldr	r3, [pc, #28]	; (274 <cpu_irq_enter_critical+0x38>)
 256:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 258:	2201      	movs	r2, #1
 25a:	4b07      	ldr	r3, [pc, #28]	; (278 <cpu_irq_enter_critical+0x3c>)
 25c:	701a      	strb	r2, [r3, #0]
 25e:	e002      	b.n	266 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 260:	2200      	movs	r2, #0
 262:	4b05      	ldr	r3, [pc, #20]	; (278 <cpu_irq_enter_critical+0x3c>)
 264:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 266:	4b02      	ldr	r3, [pc, #8]	; (270 <cpu_irq_enter_critical+0x34>)
 268:	681a      	ldr	r2, [r3, #0]
 26a:	3201      	adds	r2, #1
 26c:	601a      	str	r2, [r3, #0]
}
 26e:	4770      	bx	lr
 270:	20000020 	.word	0x20000020
 274:	20000000 	.word	0x20000000
 278:	20000024 	.word	0x20000024

0000027c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 27c:	4b08      	ldr	r3, [pc, #32]	; (2a0 <cpu_irq_leave_critical+0x24>)
 27e:	681a      	ldr	r2, [r3, #0]
 280:	3a01      	subs	r2, #1
 282:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 284:	681b      	ldr	r3, [r3, #0]
 286:	2b00      	cmp	r3, #0
 288:	d109      	bne.n	29e <cpu_irq_leave_critical+0x22>
 28a:	4b06      	ldr	r3, [pc, #24]	; (2a4 <cpu_irq_leave_critical+0x28>)
 28c:	781b      	ldrb	r3, [r3, #0]
 28e:	2b00      	cmp	r3, #0
 290:	d005      	beq.n	29e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 292:	2201      	movs	r2, #1
 294:	4b04      	ldr	r3, [pc, #16]	; (2a8 <cpu_irq_leave_critical+0x2c>)
 296:	701a      	strb	r2, [r3, #0]
 298:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 29c:	b662      	cpsie	i
	}
}
 29e:	4770      	bx	lr
 2a0:	20000020 	.word	0x20000020
 2a4:	20000024 	.word	0x20000024
 2a8:	20000000 	.word	0x20000000

000002ac <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 2ac:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 2ae:	4b0c      	ldr	r3, [pc, #48]	; (2e0 <system_clock_source_osc8m_set_config+0x34>)
 2b0:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 2b2:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 2b4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 2b6:	7840      	ldrb	r0, [r0, #1]
 2b8:	2201      	movs	r2, #1
 2ba:	4010      	ands	r0, r2
 2bc:	0180      	lsls	r0, r0, #6
 2be:	2640      	movs	r6, #64	; 0x40
 2c0:	43b4      	bics	r4, r6
 2c2:	4304      	orrs	r4, r0
 2c4:	402a      	ands	r2, r5
 2c6:	01d0      	lsls	r0, r2, #7
 2c8:	2280      	movs	r2, #128	; 0x80
 2ca:	4394      	bics	r4, r2
 2cc:	1c22      	adds	r2, r4, #0
 2ce:	4302      	orrs	r2, r0
 2d0:	2003      	movs	r0, #3
 2d2:	4001      	ands	r1, r0
 2d4:	0209      	lsls	r1, r1, #8
 2d6:	4803      	ldr	r0, [pc, #12]	; (2e4 <system_clock_source_osc8m_set_config+0x38>)
 2d8:	4002      	ands	r2, r0
 2da:	430a      	orrs	r2, r1
 2dc:	621a      	str	r2, [r3, #32]
}
 2de:	bd70      	pop	{r4, r5, r6, pc}
 2e0:	40000800 	.word	0x40000800
 2e4:	fffffcff 	.word	0xfffffcff

000002e8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 2e8:	2807      	cmp	r0, #7
 2ea:	d83b      	bhi.n	364 <system_clock_source_enable+0x7c>
 2ec:	0080      	lsls	r0, r0, #2
 2ee:	4b1e      	ldr	r3, [pc, #120]	; (368 <system_clock_source_enable+0x80>)
 2f0:	581b      	ldr	r3, [r3, r0]
 2f2:	469f      	mov	pc, r3
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
 2f4:	2000      	movs	r0, #0
 2f6:	e036      	b.n	366 <system_clock_source_enable+0x7e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 2f8:	4b1c      	ldr	r3, [pc, #112]	; (36c <system_clock_source_enable+0x84>)
 2fa:	6a19      	ldr	r1, [r3, #32]
 2fc:	2202      	movs	r2, #2
 2fe:	430a      	orrs	r2, r1
 300:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
 302:	2000      	movs	r0, #0
 304:	e02f      	b.n	366 <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 306:	4b19      	ldr	r3, [pc, #100]	; (36c <system_clock_source_enable+0x84>)
 308:	6999      	ldr	r1, [r3, #24]
 30a:	2202      	movs	r2, #2
 30c:	430a      	orrs	r2, r1
 30e:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 310:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
 312:	e028      	b.n	366 <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 314:	4b15      	ldr	r3, [pc, #84]	; (36c <system_clock_source_enable+0x84>)
 316:	8a19      	ldrh	r1, [r3, #16]
 318:	2202      	movs	r2, #2
 31a:	430a      	orrs	r2, r1
 31c:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 31e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
 320:	e021      	b.n	366 <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 322:	4b12      	ldr	r3, [pc, #72]	; (36c <system_clock_source_enable+0x84>)
 324:	8a99      	ldrh	r1, [r3, #20]
 326:	2202      	movs	r2, #2
 328:	430a      	orrs	r2, r1
 32a:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 32c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
 32e:	e01a      	b.n	366 <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 330:	4b0f      	ldr	r3, [pc, #60]	; (370 <system_clock_source_enable+0x88>)
 332:	6819      	ldr	r1, [r3, #0]
 334:	2202      	movs	r2, #2
 336:	430a      	orrs	r2, r1
 338:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
 33a:	681a      	ldr	r2, [r3, #0]
 33c:	4b0d      	ldr	r3, [pc, #52]	; (374 <system_clock_source_enable+0x8c>)
 33e:	401a      	ands	r2, r3
 340:	4b0a      	ldr	r3, [pc, #40]	; (36c <system_clock_source_enable+0x84>)
 342:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 344:	1c19      	adds	r1, r3, #0
 346:	2210      	movs	r2, #16
 348:	68cb      	ldr	r3, [r1, #12]
 34a:	421a      	tst	r2, r3
 34c:	d0fc      	beq.n	348 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 34e:	4a08      	ldr	r2, [pc, #32]	; (370 <system_clock_source_enable+0x88>)
 350:	6891      	ldr	r1, [r2, #8]
 352:	4b06      	ldr	r3, [pc, #24]	; (36c <system_clock_source_enable+0x84>)
 354:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 356:	6851      	ldr	r1, [r2, #4]
 358:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 35a:	6812      	ldr	r2, [r2, #0]
 35c:	b292      	uxth	r2, r2
 35e:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 360:	2000      	movs	r0, #0
 362:	e000      	b.n	366 <system_clock_source_enable+0x7e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 364:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
 366:	4770      	bx	lr
 368:	000007d4 	.word	0x000007d4
 36c:	40000800 	.word	0x40000800
 370:	20000028 	.word	0x20000028
 374:	0000ff7f 	.word	0x0000ff7f

00000378 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 378:	b530      	push	{r4, r5, lr}
 37a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 37c:	22c2      	movs	r2, #194	; 0xc2
 37e:	00d2      	lsls	r2, r2, #3
 380:	4b1a      	ldr	r3, [pc, #104]	; (3ec <system_clock_init+0x74>)
 382:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 384:	4b1a      	ldr	r3, [pc, #104]	; (3f0 <system_clock_init+0x78>)
 386:	685a      	ldr	r2, [r3, #4]
 388:	211e      	movs	r1, #30
 38a:	438a      	bics	r2, r1
 38c:	605a      	str	r2, [r3, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 38e:	2301      	movs	r3, #1
 390:	466a      	mov	r2, sp
 392:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 394:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 396:	4d17      	ldr	r5, [pc, #92]	; (3f4 <system_clock_init+0x7c>)
 398:	b2e0      	uxtb	r0, r4
 39a:	4669      	mov	r1, sp
 39c:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 39e:	3401      	adds	r4, #1
 3a0:	2c1c      	cmp	r4, #28
 3a2:	d1f9      	bne.n	398 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
 3a4:	a803      	add	r0, sp, #12
 3a6:	2400      	movs	r4, #0
 3a8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 3aa:	2501      	movs	r5, #1
 3ac:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 3ae:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 3b0:	4b11      	ldr	r3, [pc, #68]	; (3f8 <system_clock_init+0x80>)
 3b2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 3b4:	2006      	movs	r0, #6
 3b6:	4b11      	ldr	r3, [pc, #68]	; (3fc <system_clock_init+0x84>)
 3b8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 3ba:	4b11      	ldr	r3, [pc, #68]	; (400 <system_clock_init+0x88>)
 3bc:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
 3be:	4b11      	ldr	r3, [pc, #68]	; (404 <system_clock_init+0x8c>)
 3c0:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
 3c2:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
 3c4:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
 3c6:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 3c8:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 3ca:	466b      	mov	r3, sp
 3cc:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
 3ce:	2306      	movs	r3, #6
 3d0:	466a      	mov	r2, sp
 3d2:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
 3d4:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 3d6:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 3d8:	2000      	movs	r0, #0
 3da:	4669      	mov	r1, sp
 3dc:	4b0a      	ldr	r3, [pc, #40]	; (408 <system_clock_init+0x90>)
 3de:	4798      	blx	r3
 3e0:	2000      	movs	r0, #0
 3e2:	4b0a      	ldr	r3, [pc, #40]	; (40c <system_clock_init+0x94>)
 3e4:	4798      	blx	r3
#endif
}
 3e6:	b005      	add	sp, #20
 3e8:	bd30      	pop	{r4, r5, pc}
 3ea:	46c0      	nop			; (mov r8, r8)
 3ec:	40000800 	.word	0x40000800
 3f0:	41004000 	.word	0x41004000
 3f4:	000005b9 	.word	0x000005b9
 3f8:	000002ad 	.word	0x000002ad
 3fc:	000002e9 	.word	0x000002e9
 400:	00000411 	.word	0x00000411
 404:	40000400 	.word	0x40000400
 408:	00000435 	.word	0x00000435
 40c:	000004e9 	.word	0x000004e9

00000410 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
 410:	4b06      	ldr	r3, [pc, #24]	; (42c <system_gclk_init+0x1c>)
 412:	6999      	ldr	r1, [r3, #24]
 414:	2208      	movs	r2, #8
 416:	430a      	orrs	r2, r1
 418:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 41a:	2201      	movs	r2, #1
 41c:	4b04      	ldr	r3, [pc, #16]	; (430 <system_gclk_init+0x20>)
 41e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 420:	1c19      	adds	r1, r3, #0
 422:	780b      	ldrb	r3, [r1, #0]
 424:	4213      	tst	r3, r2
 426:	d1fc      	bne.n	422 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 428:	4770      	bx	lr
 42a:	46c0      	nop			; (mov r8, r8)
 42c:	40000400 	.word	0x40000400
 430:	40000c00 	.word	0x40000c00

00000434 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 436:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 438:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 43a:	780d      	ldrb	r5, [r1, #0]
 43c:	022d      	lsls	r5, r5, #8
 43e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 440:	784b      	ldrb	r3, [r1, #1]
 442:	2b00      	cmp	r3, #0
 444:	d002      	beq.n	44c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 446:	2380      	movs	r3, #128	; 0x80
 448:	02db      	lsls	r3, r3, #11
 44a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 44c:	7a4b      	ldrb	r3, [r1, #9]
 44e:	2b00      	cmp	r3, #0
 450:	d002      	beq.n	458 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 452:	2380      	movs	r3, #128	; 0x80
 454:	031b      	lsls	r3, r3, #12
 456:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 458:	684c      	ldr	r4, [r1, #4]
 45a:	2c01      	cmp	r4, #1
 45c:	d917      	bls.n	48e <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 45e:	1e63      	subs	r3, r4, #1
 460:	421c      	tst	r4, r3
 462:	d10f      	bne.n	484 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 464:	2c02      	cmp	r4, #2
 466:	d906      	bls.n	476 <system_gclk_gen_set_config+0x42>
 468:	2302      	movs	r3, #2
 46a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 46c:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
 46e:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 470:	429c      	cmp	r4, r3
 472:	d8fb      	bhi.n	46c <system_gclk_gen_set_config+0x38>
 474:	e000      	b.n	478 <system_gclk_gen_set_config+0x44>
 476:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 478:	0217      	lsls	r7, r2, #8
 47a:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 47c:	2380      	movs	r3, #128	; 0x80
 47e:	035b      	lsls	r3, r3, #13
 480:	431d      	orrs	r5, r3
 482:	e004      	b.n	48e <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 484:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
 486:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 488:	2380      	movs	r3, #128	; 0x80
 48a:	029b      	lsls	r3, r3, #10
 48c:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 48e:	7a0b      	ldrb	r3, [r1, #8]
 490:	2b00      	cmp	r3, #0
 492:	d002      	beq.n	49a <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 494:	2380      	movs	r3, #128	; 0x80
 496:	039b      	lsls	r3, r3, #14
 498:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 49a:	4a0f      	ldr	r2, [pc, #60]	; (4d8 <system_gclk_gen_set_config+0xa4>)
 49c:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
 49e:	b25b      	sxtb	r3, r3
 4a0:	2b00      	cmp	r3, #0
 4a2:	dbfb      	blt.n	49c <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 4a4:	4b0d      	ldr	r3, [pc, #52]	; (4dc <system_gclk_gen_set_config+0xa8>)
 4a6:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 4a8:	4b0d      	ldr	r3, [pc, #52]	; (4e0 <system_gclk_gen_set_config+0xac>)
 4aa:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 4ac:	4a0a      	ldr	r2, [pc, #40]	; (4d8 <system_gclk_gen_set_config+0xa4>)
 4ae:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 4b0:	b25b      	sxtb	r3, r3
 4b2:	2b00      	cmp	r3, #0
 4b4:	dbfb      	blt.n	4ae <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 4b6:	4b08      	ldr	r3, [pc, #32]	; (4d8 <system_gclk_gen_set_config+0xa4>)
 4b8:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 4ba:	1c1a      	adds	r2, r3, #0
 4bc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
 4be:	b25b      	sxtb	r3, r3
 4c0:	2b00      	cmp	r3, #0
 4c2:	dbfb      	blt.n	4bc <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 4c4:	4b04      	ldr	r3, [pc, #16]	; (4d8 <system_gclk_gen_set_config+0xa4>)
 4c6:	6859      	ldr	r1, [r3, #4]
 4c8:	2280      	movs	r2, #128	; 0x80
 4ca:	0252      	lsls	r2, r2, #9
 4cc:	400a      	ands	r2, r1
 4ce:	4315      	orrs	r5, r2
 4d0:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 4d2:	4b04      	ldr	r3, [pc, #16]	; (4e4 <system_gclk_gen_set_config+0xb0>)
 4d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 4d8:	40000c00 	.word	0x40000c00
 4dc:	0000023d 	.word	0x0000023d
 4e0:	40000c08 	.word	0x40000c08
 4e4:	0000027d 	.word	0x0000027d

000004e8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 4e8:	b510      	push	{r4, lr}
 4ea:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 4ec:	4a0b      	ldr	r2, [pc, #44]	; (51c <system_gclk_gen_enable+0x34>)
 4ee:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
 4f0:	b25b      	sxtb	r3, r3
 4f2:	2b00      	cmp	r3, #0
 4f4:	dbfb      	blt.n	4ee <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 4f6:	4b0a      	ldr	r3, [pc, #40]	; (520 <system_gclk_gen_enable+0x38>)
 4f8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 4fa:	4b0a      	ldr	r3, [pc, #40]	; (524 <system_gclk_gen_enable+0x3c>)
 4fc:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 4fe:	4a07      	ldr	r2, [pc, #28]	; (51c <system_gclk_gen_enable+0x34>)
 500:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
 502:	b25b      	sxtb	r3, r3
 504:	2b00      	cmp	r3, #0
 506:	dbfb      	blt.n	500 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 508:	4b04      	ldr	r3, [pc, #16]	; (51c <system_gclk_gen_enable+0x34>)
 50a:	6859      	ldr	r1, [r3, #4]
 50c:	2280      	movs	r2, #128	; 0x80
 50e:	0252      	lsls	r2, r2, #9
 510:	430a      	orrs	r2, r1
 512:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 514:	4b04      	ldr	r3, [pc, #16]	; (528 <system_gclk_gen_enable+0x40>)
 516:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 518:	bd10      	pop	{r4, pc}
 51a:	46c0      	nop			; (mov r8, r8)
 51c:	40000c00 	.word	0x40000c00
 520:	0000023d 	.word	0x0000023d
 524:	40000c04 	.word	0x40000c04
 528:	0000027d 	.word	0x0000027d

0000052c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
 52c:	b510      	push	{r4, lr}
 52e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 530:	4b06      	ldr	r3, [pc, #24]	; (54c <system_gclk_chan_enable+0x20>)
 532:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 534:	4b06      	ldr	r3, [pc, #24]	; (550 <system_gclk_chan_enable+0x24>)
 536:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
 538:	4b06      	ldr	r3, [pc, #24]	; (554 <system_gclk_chan_enable+0x28>)
 53a:	8859      	ldrh	r1, [r3, #2]
 53c:	2280      	movs	r2, #128	; 0x80
 53e:	01d2      	lsls	r2, r2, #7
 540:	430a      	orrs	r2, r1
 542:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 544:	4b04      	ldr	r3, [pc, #16]	; (558 <system_gclk_chan_enable+0x2c>)
 546:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 548:	bd10      	pop	{r4, pc}
 54a:	46c0      	nop			; (mov r8, r8)
 54c:	0000023d 	.word	0x0000023d
 550:	40000c02 	.word	0x40000c02
 554:	40000c00 	.word	0x40000c00
 558:	0000027d 	.word	0x0000027d

0000055c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 55c:	b510      	push	{r4, lr}
 55e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 560:	4b0f      	ldr	r3, [pc, #60]	; (5a0 <system_gclk_chan_disable+0x44>)
 562:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 564:	4b0f      	ldr	r3, [pc, #60]	; (5a4 <system_gclk_chan_disable+0x48>)
 566:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 568:	4b0f      	ldr	r3, [pc, #60]	; (5a8 <system_gclk_chan_disable+0x4c>)
 56a:	8858      	ldrh	r0, [r3, #2]
 56c:	0500      	lsls	r0, r0, #20
 56e:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 570:	8859      	ldrh	r1, [r3, #2]
 572:	4a0e      	ldr	r2, [pc, #56]	; (5ac <system_gclk_chan_disable+0x50>)
 574:	400a      	ands	r2, r1
 576:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 578:	8859      	ldrh	r1, [r3, #2]
 57a:	4a0d      	ldr	r2, [pc, #52]	; (5b0 <system_gclk_chan_disable+0x54>)
 57c:	400a      	ands	r2, r1
 57e:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 580:	1c19      	adds	r1, r3, #0
 582:	2280      	movs	r2, #128	; 0x80
 584:	01d2      	lsls	r2, r2, #7
 586:	884b      	ldrh	r3, [r1, #2]
 588:	4213      	tst	r3, r2
 58a:	d1fc      	bne.n	586 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 58c:	4b06      	ldr	r3, [pc, #24]	; (5a8 <system_gclk_chan_disable+0x4c>)
 58e:	0201      	lsls	r1, r0, #8
 590:	8858      	ldrh	r0, [r3, #2]
 592:	4a06      	ldr	r2, [pc, #24]	; (5ac <system_gclk_chan_disable+0x50>)
 594:	4002      	ands	r2, r0
 596:	430a      	orrs	r2, r1
 598:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 59a:	4b06      	ldr	r3, [pc, #24]	; (5b4 <system_gclk_chan_disable+0x58>)
 59c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 59e:	bd10      	pop	{r4, pc}
 5a0:	0000023d 	.word	0x0000023d
 5a4:	40000c02 	.word	0x40000c02
 5a8:	40000c00 	.word	0x40000c00
 5ac:	fffff0ff 	.word	0xfffff0ff
 5b0:	ffffbfff 	.word	0xffffbfff
 5b4:	0000027d 	.word	0x0000027d

000005b8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
 5b8:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 5ba:	780c      	ldrb	r4, [r1, #0]
 5bc:	0224      	lsls	r4, r4, #8
 5be:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
 5c0:	4b02      	ldr	r3, [pc, #8]	; (5cc <system_gclk_chan_set_config+0x14>)
 5c2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 5c4:	b2a4      	uxth	r4, r4
 5c6:	4b02      	ldr	r3, [pc, #8]	; (5d0 <system_gclk_chan_set_config+0x18>)
 5c8:	805c      	strh	r4, [r3, #2]
}
 5ca:	bd10      	pop	{r4, pc}
 5cc:	0000055d 	.word	0x0000055d
 5d0:	40000c00 	.word	0x40000c00

000005d4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 5d4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 5d6:	78d3      	ldrb	r3, [r2, #3]
 5d8:	2b00      	cmp	r3, #0
 5da:	d11e      	bne.n	61a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 5dc:	7813      	ldrb	r3, [r2, #0]
 5de:	2b80      	cmp	r3, #128	; 0x80
 5e0:	d004      	beq.n	5ec <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 5e2:	061b      	lsls	r3, r3, #24
 5e4:	2480      	movs	r4, #128	; 0x80
 5e6:	0264      	lsls	r4, r4, #9
 5e8:	4323      	orrs	r3, r4
 5ea:	e000      	b.n	5ee <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
 5ec:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 5ee:	7854      	ldrb	r4, [r2, #1]
 5f0:	2502      	movs	r5, #2
 5f2:	43ac      	bics	r4, r5
 5f4:	d10a      	bne.n	60c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 5f6:	7894      	ldrb	r4, [r2, #2]
 5f8:	2c00      	cmp	r4, #0
 5fa:	d103      	bne.n	604 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
 5fc:	2480      	movs	r4, #128	; 0x80
 5fe:	02a4      	lsls	r4, r4, #10
 600:	4323      	orrs	r3, r4
 602:	e002      	b.n	60a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 604:	24c0      	movs	r4, #192	; 0xc0
 606:	02e4      	lsls	r4, r4, #11
 608:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 60a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 60c:	7854      	ldrb	r4, [r2, #1]
 60e:	3c01      	subs	r4, #1
 610:	2c01      	cmp	r4, #1
 612:	d804      	bhi.n	61e <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 614:	4c11      	ldr	r4, [pc, #68]	; (65c <_system_pinmux_config+0x88>)
 616:	4023      	ands	r3, r4
 618:	e001      	b.n	61e <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
 61a:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
 61c:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 61e:	040d      	lsls	r5, r1, #16
 620:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 622:	24a0      	movs	r4, #160	; 0xa0
 624:	05e4      	lsls	r4, r4, #23
 626:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 628:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 62a:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
 62c:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 62e:	24d0      	movs	r4, #208	; 0xd0
 630:	0624      	lsls	r4, r4, #24
 632:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 634:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 636:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 638:	78d4      	ldrb	r4, [r2, #3]
 63a:	2c00      	cmp	r4, #0
 63c:	d10c      	bne.n	658 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 63e:	035c      	lsls	r4, r3, #13
 640:	d505      	bpl.n	64e <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 642:	7893      	ldrb	r3, [r2, #2]
 644:	2b01      	cmp	r3, #1
 646:	d101      	bne.n	64c <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
 648:	6181      	str	r1, [r0, #24]
 64a:	e000      	b.n	64e <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
 64c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 64e:	7853      	ldrb	r3, [r2, #1]
 650:	3b01      	subs	r3, #1
 652:	2b01      	cmp	r3, #1
 654:	d800      	bhi.n	658 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
 656:	6081      	str	r1, [r0, #8]
		}
	}
}
 658:	bd30      	pop	{r4, r5, pc}
 65a:	46c0      	nop			; (mov r8, r8)
 65c:	fffbffff 	.word	0xfffbffff

00000660 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 660:	b508      	push	{r3, lr}
 662:	1c03      	adds	r3, r0, #0
 664:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 666:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 668:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 66a:	2900      	cmp	r1, #0
 66c:	d103      	bne.n	676 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
 66e:	0958      	lsrs	r0, r3, #5
 670:	01c0      	lsls	r0, r0, #7
 672:	4904      	ldr	r1, [pc, #16]	; (684 <system_pinmux_pin_set_config+0x24>)
 674:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 676:	211f      	movs	r1, #31
 678:	400b      	ands	r3, r1
 67a:	2101      	movs	r1, #1
 67c:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
 67e:	4b02      	ldr	r3, [pc, #8]	; (688 <system_pinmux_pin_set_config+0x28>)
 680:	4798      	blx	r3
}
 682:	bd08      	pop	{r3, pc}
 684:	41004400 	.word	0x41004400
 688:	000005d5 	.word	0x000005d5

0000068c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 68c:	4770      	bx	lr
 68e:	46c0      	nop			; (mov r8, r8)

00000690 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 690:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 692:	4b05      	ldr	r3, [pc, #20]	; (6a8 <system_init+0x18>)
 694:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 696:	4b05      	ldr	r3, [pc, #20]	; (6ac <system_init+0x1c>)
 698:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 69a:	4b05      	ldr	r3, [pc, #20]	; (6b0 <system_init+0x20>)
 69c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 69e:	4b05      	ldr	r3, [pc, #20]	; (6b4 <system_init+0x24>)
 6a0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 6a2:	4b05      	ldr	r3, [pc, #20]	; (6b8 <system_init+0x28>)
 6a4:	4798      	blx	r3
}
 6a6:	bd08      	pop	{r3, pc}
 6a8:	00000379 	.word	0x00000379
 6ac:	00000239 	.word	0x00000239
 6b0:	0000068d 	.word	0x0000068d
 6b4:	00000121 	.word	0x00000121
 6b8:	0000068d 	.word	0x0000068d

000006bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 6bc:	e7fe      	b.n	6bc <Dummy_Handler>
 6be:	46c0      	nop			; (mov r8, r8)

000006c0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 6c0:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 6c2:	4b1c      	ldr	r3, [pc, #112]	; (734 <Reset_Handler+0x74>)
 6c4:	4a1c      	ldr	r2, [pc, #112]	; (738 <Reset_Handler+0x78>)
 6c6:	429a      	cmp	r2, r3
 6c8:	d003      	beq.n	6d2 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 6ca:	4b1c      	ldr	r3, [pc, #112]	; (73c <Reset_Handler+0x7c>)
 6cc:	4a19      	ldr	r2, [pc, #100]	; (734 <Reset_Handler+0x74>)
 6ce:	429a      	cmp	r2, r3
 6d0:	d304      	bcc.n	6dc <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 6d2:	4b1b      	ldr	r3, [pc, #108]	; (740 <Reset_Handler+0x80>)
 6d4:	4a1b      	ldr	r2, [pc, #108]	; (744 <Reset_Handler+0x84>)
 6d6:	429a      	cmp	r2, r3
 6d8:	d310      	bcc.n	6fc <Reset_Handler+0x3c>
 6da:	e01b      	b.n	714 <Reset_Handler+0x54>
 6dc:	4b1a      	ldr	r3, [pc, #104]	; (748 <Reset_Handler+0x88>)
 6de:	4817      	ldr	r0, [pc, #92]	; (73c <Reset_Handler+0x7c>)
 6e0:	3003      	adds	r0, #3
 6e2:	1ac0      	subs	r0, r0, r3
 6e4:	0880      	lsrs	r0, r0, #2
 6e6:	3001      	adds	r0, #1
 6e8:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 6ea:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
 6ec:	4911      	ldr	r1, [pc, #68]	; (734 <Reset_Handler+0x74>)
 6ee:	4a12      	ldr	r2, [pc, #72]	; (738 <Reset_Handler+0x78>)
 6f0:	58d4      	ldr	r4, [r2, r3]
 6f2:	50cc      	str	r4, [r1, r3]
 6f4:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 6f6:	4283      	cmp	r3, r0
 6f8:	d1fa      	bne.n	6f0 <Reset_Handler+0x30>
 6fa:	e7ea      	b.n	6d2 <Reset_Handler+0x12>
 6fc:	4b11      	ldr	r3, [pc, #68]	; (744 <Reset_Handler+0x84>)
 6fe:	1d1a      	adds	r2, r3, #4
 700:	490f      	ldr	r1, [pc, #60]	; (740 <Reset_Handler+0x80>)
 702:	3103      	adds	r1, #3
 704:	1a89      	subs	r1, r1, r2
 706:	0889      	lsrs	r1, r1, #2
 708:	0089      	lsls	r1, r1, #2
 70a:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
 70c:	2100      	movs	r1, #0
 70e:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 710:	4293      	cmp	r3, r2
 712:	d1fc      	bne.n	70e <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 714:	4b0d      	ldr	r3, [pc, #52]	; (74c <Reset_Handler+0x8c>)
 716:	21ff      	movs	r1, #255	; 0xff
 718:	4a0d      	ldr	r2, [pc, #52]	; (750 <Reset_Handler+0x90>)
 71a:	438a      	bics	r2, r1
 71c:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 71e:	4b0d      	ldr	r3, [pc, #52]	; (754 <Reset_Handler+0x94>)
 720:	6859      	ldr	r1, [r3, #4]
 722:	2280      	movs	r2, #128	; 0x80
 724:	430a      	orrs	r2, r1
 726:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
 728:	4b0b      	ldr	r3, [pc, #44]	; (758 <Reset_Handler+0x98>)
 72a:	4798      	blx	r3

        /* Branch to main function */
        main();
 72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <Reset_Handler+0x9c>)
 72e:	4798      	blx	r3
 730:	e7fe      	b.n	730 <Reset_Handler+0x70>
 732:	46c0      	nop			; (mov r8, r8)
 734:	20000000 	.word	0x20000000
 738:	00000814 	.word	0x00000814
 73c:	20000004 	.word	0x20000004
 740:	20000084 	.word	0x20000084
 744:	20000004 	.word	0x20000004
 748:	20000004 	.word	0x20000004
 74c:	e000ed00 	.word	0xe000ed00
 750:	00000000 	.word	0x00000000
 754:	41004000 	.word	0x41004000
 758:	00000789 	.word	0x00000789
 75c:	00000761 	.word	0x00000761

00000760 <main>:
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
#include <asf.h>

int main (void)
{
 760:	b500      	push	{lr}
 762:	b083      	sub	sp, #12
	system_init();
 764:	4b06      	ldr	r3, [pc, #24]	; (780 <main+0x20>)
 766:	4798      	blx	r3
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
 768:	a901      	add	r1, sp, #4
 76a:	2300      	movs	r3, #0
 76c:	708b      	strb	r3, [r1, #2]
	struct port_config cfg;
	port_get_config_defaults(&cfg);
	cfg.direction = PORT_PIN_DIR_OUTPUT;
 76e:	2201      	movs	r2, #1
 770:	700a      	strb	r2, [r1, #0]
	cfg.input_pull = PORT_PIN_PULL_NONE;
 772:	704b      	strb	r3, [r1, #1]
	//cfg.powersave = true;
	port_pin_set_config(PIN_PA11, &cfg);
 774:	200b      	movs	r0, #11
 776:	4b03      	ldr	r3, [pc, #12]	; (784 <main+0x24>)
 778:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
}
 77a:	2000      	movs	r0, #0
 77c:	b003      	add	sp, #12
 77e:	bd00      	pop	{pc}
 780:	00000691 	.word	0x00000691
 784:	00000215 	.word	0x00000215

00000788 <__libc_init_array>:
 788:	b570      	push	{r4, r5, r6, lr}
 78a:	4b0e      	ldr	r3, [pc, #56]	; (7c4 <__libc_init_array+0x3c>)
 78c:	4d0e      	ldr	r5, [pc, #56]	; (7c8 <__libc_init_array+0x40>)
 78e:	2400      	movs	r4, #0
 790:	1aed      	subs	r5, r5, r3
 792:	10ad      	asrs	r5, r5, #2
 794:	1c1e      	adds	r6, r3, #0
 796:	42ac      	cmp	r4, r5
 798:	d004      	beq.n	7a4 <__libc_init_array+0x1c>
 79a:	00a3      	lsls	r3, r4, #2
 79c:	58f3      	ldr	r3, [r6, r3]
 79e:	4798      	blx	r3
 7a0:	3401      	adds	r4, #1
 7a2:	e7f8      	b.n	796 <__libc_init_array+0xe>
 7a4:	f000 f826 	bl	7f4 <_init>
 7a8:	4b08      	ldr	r3, [pc, #32]	; (7cc <__libc_init_array+0x44>)
 7aa:	4d09      	ldr	r5, [pc, #36]	; (7d0 <__libc_init_array+0x48>)
 7ac:	2400      	movs	r4, #0
 7ae:	1aed      	subs	r5, r5, r3
 7b0:	10ad      	asrs	r5, r5, #2
 7b2:	1c1e      	adds	r6, r3, #0
 7b4:	42ac      	cmp	r4, r5
 7b6:	d004      	beq.n	7c2 <__libc_init_array+0x3a>
 7b8:	00a3      	lsls	r3, r4, #2
 7ba:	58f3      	ldr	r3, [r6, r3]
 7bc:	4798      	blx	r3
 7be:	3401      	adds	r4, #1
 7c0:	e7f8      	b.n	7b4 <__libc_init_array+0x2c>
 7c2:	bd70      	pop	{r4, r5, r6, pc}
 7c4:	00000800 	.word	0x00000800
 7c8:	00000800 	.word	0x00000800
 7cc:	00000800 	.word	0x00000800
 7d0:	00000804 	.word	0x00000804
 7d4:	00000314 	.word	0x00000314
 7d8:	00000364 	.word	0x00000364
 7dc:	00000364 	.word	0x00000364
 7e0:	000002f4 	.word	0x000002f4
 7e4:	00000306 	.word	0x00000306
 7e8:	00000322 	.word	0x00000322
 7ec:	000002f8 	.word	0x000002f8
 7f0:	00000330 	.word	0x00000330

000007f4 <_init>:
 7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 7f6:	46c0      	nop			; (mov r8, r8)
 7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 7fa:	bc08      	pop	{r3}
 7fc:	469e      	mov	lr, r3
 7fe:	4770      	bx	lr

00000800 <__init_array_start>:
 800:	000000cd 	.word	0x000000cd

00000804 <_fini>:
 804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 806:	46c0      	nop			; (mov r8, r8)
 808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80a:	bc08      	pop	{r3}
 80c:	469e      	mov	lr, r3
 80e:	4770      	bx	lr

00000810 <__fini_array_start>:
 810:	000000a5 	.word	0x000000a5
